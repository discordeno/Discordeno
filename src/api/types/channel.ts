import {
  AllowedMentionTypes,
  ChannelTypes,
  MessageActivityTypes,
  MessageFlags,
  MessageTypes,
} from "../../../mod.ts";
import { Emoji } from "./emoji.ts";
import { GuildMember } from "./guild.ts";
import { Permission } from "./mod.ts";
import { User } from "./user.ts";

/** https://discord.com/developers/docs/resources/channel#channel-object-channel-structure */
export interface ChannelObject {
  /** the id of this channel */
  id: string;
  /** the type of channel */
  type: keyof typeof ChannelTypes;
  /** the id of the guild */
  guildID?: string;
  /** sorting position of the channel */
  position?: number;
  /** explicit permission overwrites for members and roles */
  permissionOverwrites?: Overwrite[];
  /** the name of the channel (2-100 characters) */
  name?: string;
  /** the channel topic (0-1024 characters) */
  topic?: string | null;
  /** whether the channel is nsfw */
  nsfw?: boolean;
  /** the id of the last message sent in this channel (may not point to an existing or valid message) */
  lastMessageID?: string | null;
  /** the bitrate (in bits) of the voice channel */
  bitrate?: number;
  /** the user limit of the voice channel */
  userLimit?: number;
  /** amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manageMessages or manageChannel, are unaffected */
  rateLimitPerUser?: number;
  /** the recipients of the DM */
  recipients?: User[];
  /** icon hash */
  icon?: string | null;
  /** id of the DM creator */
  ownerID?: string;
  /** application id of the group DM creator if it is bot-created */
  applicationID?: string;
  /** id of the parent category for a channel (each parent category can contain up to 50 channels) */
  parentID?: string | null;
  /** when the last pinned message was pinned. This may be null in events such as GUILDCREATE when a message is not pinned. */
  lastPinTimestamp?: string | null;
}

// used
export interface MessageObject {
  /** id of the message */
  id: string;
  /** id of the channel the message was sent in */
  channelID: string;
  /** id of the guild the message was sent in */
  guildID?: string;
  /** the author of this message (not guaranteed to be a valid user) */
  author: User;
  /** member properties for this message's author */
  member?: Partial<GuildMember>;
  /** contents of the message */
  content: string;
  /** when this message was sent */
  timestamp: string;
  /** when this message was edited (or null if never) */
  editedTimestamp: string | null;
  /** whether this was a TTS message */
  tts: boolean;
  /** whether this message mentions everyone */
  mentionEveryone: boolean;
  /** users specifically mentioned in the message */
  mentions: (User & Partial<GuildMember>)[];
  /** roles specifically mentioned in this message */
  mentionRoles: string[];
  /** channels specifically mentioned in this message */
  mentionChannels?: ChannelMention[];
  /** any attached files */
  attachments: Attachment[];
  /** any embedded content */
  embeds: Embed[];
  /** reactions to the message */
  reactions?: Reaction[];
  /** used for validating a message was sent */
  nonce?: number | string;
  /** whether this message is pinned */
  pinned: boolean;
  /** if the message is generated by a webhook, this is the webhook's id */
  webhookID?: string;
  /** type of message */
  type: keyof typeof MessageTypes;
  /** sent with Rich Presence-related chat embeds */
  activity?: MessageActivity;
  /** sent with Rich Presence-related chat embeds */
  application?: MessageApplication;
  /** reference data sent with crossposted messages and replies */
  messageReference?: MessageReference;
  /** message flags combined as a bitfield */
  flags?: keyof typeof MessageFlags;
  /** the stickers sent with the message (bots currently can only receive messages with stickers, not send) */
  stickers?: MessageSticker[];
  /** the message associated with the `messageReference` */
  referencedMessage?: MessageObject | null;
}

// used
export interface MessageActivity {
  /** type of message activity */
  type: keyof typeof MessageActivityTypes;
  /** partyId from a Rich Presence event */
  partyID?: string;
}

/** https://discord.com/developers/docs/resources/channel#message-object-message-application-structure */
export interface MessageApplication {
  /** id of the application */
  id: string;
  /** id of the embed's image asset */
  coverImage?: string;
  /** application's description */
  description: string;
  /** id of the application's icon */
  icon: string | null;
  /** name of the application */
  name: string;
}

// used
/** https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure */
export interface MessageReference {
  /** id of the originating message */
  messageID?: string;
  /** id of the originating message's channel */
  channelID?: string;
  /** id of the originating message's guild */
  guildID?: string;
}

// used
export interface MessageSticker {
  /** id of the sticker */
  id: string;
  /** id of the pack the sticker is from */
  packID: string;
  /** name of the sticker */
  name: string;
  /** description of the sticker */
  description: string;
  /** a comma-separated list of tags for the sticker */
  tags?: string;
  /** sticker asset hash */
  asset: string;
  /** sticker preview asset hash */
  previewAsset: string | null;
  /** type of sticker format */
  formatType: number;
}

/** https://discord.com/developers/docs/resources/channel#followed-channel-object-followed-channel-structure */
export interface FollowedChannel {
  /** source channel id */
  channelID: string;
  /** created target webhook id */
  webhookID: string;
}

/** https://discord.com/developers/docs/resources/channel#reaction-object-reaction-structure */
export interface Reaction {
  /** times this emoji has been used to react */
  count: number;
  /** whether the current user reacted using this emoji */
  me: boolean;
  /** emoji information */
  emoji: Partial<Emoji>;
}

// used
export interface Overwrite {
  /** role or user id */
  id: string;
  /** either role or member */
  type: keyof typeof OverwriteTypes;
  /** permission bit set */
  allow: Permission[];
  /** permission bit set */
  deny: Permission[];
}

// used
export enum OverwriteTypes {
  ROLE,
  MEMBER,
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-structure */
export interface Embed {
  /** title of embed */
  title?: string;
  /** type of embed (always "rich" for webhook embeds) */
  type?: string;
  /** description of embed */
  description?: string;
  /** url of embed */
  url?: string;
  /** timestamp of embed content */
  timestamp?: string;
  /** color code of the embed */
  color?: number;
  /** footer information */
  footer?: EmbedFooter;
  /** image information */
  image?: EmbedImage;
  /** thumbnail information */
  thumbnail?: EmbedThumbnail;
  /** video information */
  video?: EmbedVideo;
  /** provider information */
  provider?: EmbedProvider;
  /** author information */
  author?: EmbedAuthor;
  /** fields information */
  fields?: EmbedField[];
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure */
export interface EmbedThumbnail {
  /** source url of thumbnail (only supports http(s) and attachments) */
  url?: string;
  /** a proxied url of the thumbnail */
  proxyUrl?: string;
  /** height of thumbnail */
  height?: number;
  /** width of thumbnail */
  width?: number;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-video-structure */
export interface EmbedVideo {
  /** source url of video */
  url?: string;
  /** height of video */
  height?: number;
  /** width of video */
  width?: number;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-image-structure */
export interface EmbedImage {
  /** source url of image (only supports http(s) and attachments) */
  url?: string;
  /** a proxied url of the image */
  proxyUrl?: string;
  /** height of image */
  height?: number;
  /** width of image */
  width?: number;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-provider-structure */
export interface EmbedProvider {
  /** name of provider */
  name?: string;
  /** url of provider */
  url?: string;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure */
export interface EmbedAuthor {
  /** name of author */
  name?: string;
  /** url of author */
  url?: string;
  /** url of author icon (only supports http(s) and attachments) */
  iconUrl?: string;
  /** a proxied url of author icon */
  proxyIconUrl?: string;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure */
export interface EmbedFooter {
  /** footer text */
  text: string;
  /** url of footer icon (only supports http(s) and attachments) */
  iconUrl?: string;
  /** a proxied url of footer icon */
  proxyIconUrl?: string;
}

// used
/** https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure */
export interface EmbedField {
  /** name of the field */
  name: string;
  /** value of the field */
  value: string;
  /** whether or not this field should display inline */
  inline?: boolean;
}

/** https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure */
export interface Attachment {
  /** attachment id */
  id: string;
  /** name of file attached */
  filename: string;
  /** size of file in bytes */
  size: number;
  /** source url of file */
  url: string;
  /** a proxied url of file */
  proxyUrl: string;
  /** height of file (if image) */
  height?: number | null;
  /** width of file (if image) */
  width?: number | null;
}

/** https://discord.com/developers/docs/resources/channel#channel-mention-object-channel-mention-structure */
export interface ChannelMention {
  /** id of the channel */
  id: string;
  /** id of the guild containing the channel */
  guildID: string;
  /** the type of channel */
  type: keyof typeof ChannelTypes;
  /** the name of the channel */
  name: string;
}

// used
/** https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mentions-structure */
export interface AllowedMentions {
  /** An array of allowed mention types to parse from the content. */
  parse?: (keyof typeof AllowedMentionTypes)[];
  /** Array of roleIds to mention (Max size of 100) */
  roles?: string[];
  /** Array of userIds to mention (Max size of 100) */
  users?: string[];
  /** For replies, whether to mention the author of the message being replied to (default false) */
  repliedUser?: boolean;
}

/** https://discord.com/developers/docs/resources/channel#modify-channel-json-params */
export interface ModifyChannelOptions {
  /** 2-100 character channel name */
  name?: string;
  /** the type of channel; only conversion between text and news is supported and only in guilds with the "NEWS" feature */
  type?: keyof typeof ChannelTypes;
  /** the position of the channel in the left-hand listing */
  position?: number;
  /** 0-1024 character channel topic */
  topic?: string;
  /** whether the channel is nsfw */
  nsfw?: boolean;
  /** amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `MANAGEMESSAGES` or `MANAGECHANNELS`, are unaffected */
  // TODO: v11 change to rateLimitPerUser
  // rateLimitPerUser?: number;
  slowmode?: number;
  /** the bitrate (in bits) of the voice channel; 8000 to 96000 (128000 for VIP servers) */
  bitrate?: number;
  /** the user limit of the voice channel; 0 refers to no limit, 1 to 99 refers to a user limit */
  userLimit?: number;
  /** channel or category-specific permissions */
  // TODO: v11 change to permissionOverwrites
  // permissionOverwrites?: Overwrite[];
  overwrites?: Overwrite[];
  /** id of the new parent category for a channel */
  parentID?: string;
}

// used
export interface GetMessages {
  /** Max number of messages to return(1-100). Defaults to 50. */
  limit?: number;
}

// used
export interface GetMessagesAfter extends GetMessages {
  /** Get messages after this message id */
  after: string;
}

// used
export interface GetMessagesBefore extends GetMessages {
  /** Get messages before this message id */
  before: string;
}

// used
export interface GetMessagesAround extends GetMessages {
  /** Get messages around this message id. */
  around: string;
}

// used
export interface MessageContent {
  /** the message contents (up to 2000 characters) */
  content?: string;
  /** a nonce that can be used for optimistic message sending */
  nonce?: number | string;
  /** `true` if this is a TTS message */
  tts?: boolean;
  /** the contents of the file being sent */
  file?: { blob: unknown; name: string };
  /** embedded rich content */
  embed?: Embed;
  /** jSON encoded body of any additional request fields. */
  jsonPayload?: string;
  /** allowed mentions for a message */
  // TODO: v11 change to allowedMentions
  // allowedMentions?: AllowedMentions;
  mentions?: AllowedMentions;
  /** include to make your message a reply. Use MessageReply if you want to check the guild and channel. */
  reply?: string | MessageReference;
}

/** https://discord.com/developers/docs/resources/channel#get-reactions-query-string-params */
export interface GetReactionsOptions {
  /** get users before this user ID */
  before?: string;
  /** get users after this user ID */
  after?: string;
  /** max number of users to return (1-100) */
  limit?: number;
}

/** https://discord.com/developers/docs/resources/channel#edit-message-json-params */
export interface EditMessageOptions {
  /** the new message contents (up to 2000 characters) */
  content?: string | null;
  /** embedded rich content */
  embed?: Embed | null;
  /** edit the flags of a message (only SUPPRESSEMBEDS can currently be set/unset) */
  flags?: (keyof typeof MessageFlags) | null;
  /** allowed mentions for the message */
  allowedMentions?: AllowedMentions | null;
}

/** https://discord.com/developers/docs/resources/channel#bulk-delete-messages-json-params */
export interface BulkDeleteMessagesOptions {
  /** an array of message ids to delete (2-100) */
  messages: string[];
}

/** https://discord.com/developers/docs/resources/channel#create-channel-invite-json-params */
export interface CreateChannelInviteOptions {
  /** duration of invite in seconds before expiry, or 0 for never */
  maxAge?: number;
  /** max number of uses or 0 for unlimited */
  maxUses?: number;
  /** whether this invite only grants temporary membership */
  temporary?: boolean;
  /** if true, don't try to reuse a similar invite (useful for creating many unique one time use invites) */
  unique?: boolean;
  /** the target user id for this invite */
  targetUser?: string;
  /** the type of target user for this invite */
  targetUserType?: number;
}

/** https://discord.com/developers/docs/resources/channel#follow-news-channel-json-params */
export interface FollowNewsChannelOptions {
  /** id of target channel */
  webhookChannelID: string;
}

/** https://discord.com/developers/docs/resources/channel#group-dm-add-recipient-json-params */
export interface GroupDMAddRecipientOptions {
  /** access token of a user that has granted your app the gdm.join scope */
  accessToken: string;
  /** nickname of the user being added */
  nick: string;
}
