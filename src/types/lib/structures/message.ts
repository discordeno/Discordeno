import { sendMessage } from "../../../api/handlers/channel.ts";
import { deleteMessageByID } from "../../../api/handlers/message/delete/id.ts";
import { pin } from "../../../api/handlers/message/pins/pin.ts";
import { addReaction } from "../../../api/handlers/message/reactions/add/add.ts";
import { addReactions } from "../../../api/handlers/message/reactions/add/multiple.ts";
import { removeAllReactions } from "../../../api/handlers/message/reactions/remove/all.ts";
import { removeReactionEmoji } from "../../../api/handlers/message/reactions/remove/emoji.ts";
import { removeReaction } from "../../../api/handlers/message/reactions/remove/remove.ts";
import { DiscordUser } from "../../discord/member/user/user.ts";
import { editMessage } from "../../../api/handlers/message/edit.ts";
import { DiscordAttachment } from "./message/attachment.ts";
import { DiscordEmbed } from "./message/embed/embed.ts";
import { DiscordReaction } from "./message/reaction.ts";
import { MessageContent } from "./message/content.ts";
import { DiscordMessageActivity } from "../../discord/message/activity/activity.ts";
import { DiscordReferencePayload } from "./message/replies/incoming.ts";
import { DiscordApplication } from "../../discord/oauth/application.ts";
import { DiscordMessageSticker} from "../../discord/message/stickers/sticker.ts";

export interface Message {
  /** The id of the message */
  id: string;
  /** The id of the channel the message was sent in */
  channelID: string;
  /** The id of the guild the message was sent in */
  guildID: string;
  /** The author of this message (not guaranteed to be a valid user such as a webhook.) */
  author: DiscordUser;
  /** The contents of the message */
  content: string;
  /** When this message was sent */
  timestamp: number;
  /** When this message was edited (if it was not edited, null) */
  editedTimestamp?: number;
  /** Whether this was a TextToSpeech message. */
  tts: boolean;
  /** Whether this message mentions everyone */
  mentionsEveryone: boolean;
  /** Users specifically mentioned in the message. */
  mentions: string[];
  /** Roles specifically mentioned in this message */
  mentionRoleIDs: string[];
  /** Channels specifically mentioned in this message */
  mentionChannelIDs: string[];
  /** Any attached files */
  attachments: DiscordAttachment[];
  /** Any embedded content */
  embeds: DiscordEmbed[];
  /** Reactions to the message */
  reactions?: DiscordReaction[];
  /** Used for validating a message was sent */
  nonce?: number | string;
  /** Whether this message is pinned */
  pinned: boolean;
  /** If the message is generated by a webhook, this is the webhooks id */
  // deno-lint-ignore camelcase
  webhook_id?: string;
  /** The type of message */
  type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
  /** The activities sent with Rich Presence-related chat embeds. */
  activity?: DiscordMessageActivity;
  /** Applications that sent with Rich Presence related chat embeds. */
  applications?: DiscordApplication;
  /** The reference data sent with crossposted messages */
  messageReference?: DiscordReferencePayload;
  /** The message flags combined like permission bits describe extra features of the message */
  flags?: 1 | 2 | 4 | 8 | 16;
  /** the stickers sent with the message (bots currently can only receive messages with stickers, not send) */
  stickers?: DiscordMessageSticker[];
  /** The message id of the original message if this message was sent as a reply. If null, the original message was deleted. */
  referencedMessageID?: MessageCreateOptions | null;

  // GETTERS

  /** The channel where this message was sent. Can be undefined if uncached. */
  channel?: Channel;
  /** The guild of this message. Can be undefined if not in cache or in DM */
  guild?: Guild;
  /** The member for the user who sent the message. Can be undefined if not in cache or in dm. */
  member?: Member;
  /** The guild member details for this guild and member. Can be undefined if not in cache or in dm. */
  guildMember?: GuildMember;
  /** The url link to this message */
  link: string;
  /** The role objects for all the roles that were mentioned in this message */
  mentionedRoles: Role[];
  /** The channel objects for all the channels that were mentioned in this message. */
  mentionedChannels: Channel[];
  /** The member objects for all the members that were mentioned in this message. */
  mentionedMembers: Member[];

  // METHODS

  /** Delete the message */
  delete(
    reason?: string,
    delayMilliseconds?: number,
  ): ReturnType<typeof deleteMessageByID>;
  /** Edit the message */
  edit(content: string | MessageContent): ReturnType<typeof editMessage>;
  /** Pins the message in the channel */
  pin(): ReturnType<typeof pin>;
  /** Add a reaction to the message */
  addReaction(reaction: string): ReturnType<typeof addReaction>;
  /** Add multiple reactions to the message without or without order. */
  addReactions(
    reactions: string[],
    ordered?: boolean,
  ): ReturnType<typeof addReactions>;
  /** Send a inline reply to this message */
  reply(content: string | MessageContent): ReturnType<typeof sendMessage>;
  /** Send a message to this channel where this message is */
  send(content: string | MessageContent): ReturnType<typeof sendMessage>;
  /** Send a message to this channel and then delete it after a bit. By default it will delete after 10 seconds with no reason provided. */
  alert(
    content: string | MessageContent,
    timeout?: number,
    reason?: string,
  ): Promise<void>;
  /** Send a inline reply to this message but then delete it after a bit. By default it will delete after 10 seconds with no reason provided.  */
  alertReply(
    content: string | MessageContent,
    timeout?: number,
    reason?: string,
  ): Promise<unknown>;
  /** Remove all reactions */
  removeAllReactions(): ReturnType<typeof removeAllReactions>;
  /** Remove all reactions */
  removeReactionEmoji(reaction: string): ReturnType<typeof removeReactionEmoji>;
  /** Remove all reactions */
  removeReaction(reaction: string): ReturnType<typeof removeReaction>;
}
